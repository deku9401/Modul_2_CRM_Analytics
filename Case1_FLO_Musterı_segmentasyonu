###############################################################
# RFM ile Müşteri Segmentasyonu (Customer Segmentation with RFM)
###############################################################

###############################################################
# İş Problemi (Business Problem)
###############################################################
# FLO müşterilerini segmentlere ayırıp bu segmentlere göre pazarlama stratejileri belirlemek istiyor.
# Buna yönelik olarak müşterilerin davranışları tanımlanacak ve bu davranış öbeklenmelerine göre gruplar oluşturulacak..

###############################################################
# Veri Seti Hikayesi
###############################################################

# Veri seti son alışverişlerini 2020 - 2021 yıllarında OmniChannel(hem online hem offline alışveriş yapan) olarak yapan müşterilerin geçmiş alışveriş davranışlarından
# elde edilen bilgilerden oluşmaktadır.

# master_id: Eşsiz müşteri numarası
# order_channel : Alışveriş yapılan platforma ait hangi kanalın kullanıldığı (Android, ios, Desktop, Mobile, Offline)
# last_order_channel : En son alışverişin yapıldığı kanal
# first_order_date : Müşterinin yaptığı ilk alışveriş tarihi
# last_order_date : Müşterinin yaptığı son alışveriş tarihi
# last_order_date_online : Muşterinin online platformda yaptığı son alışveriş tarihi
# last_order_date_offline : Muşterinin offline platformda yaptığı son alışveriş tarihi
# order_num_total_ever_online : Müşterinin online platformda yaptığı toplam alışveriş sayısı
# order_num_total_ever_offline : Müşterinin offline'da yaptığı toplam alışveriş sayısı
# customer_value_total_ever_offline : Müşterinin offline alışverişlerinde ödediği toplam ücret
# customer_value_total_ever_online : Müşterinin online alışverişlerinde ödediği toplam ücret
# interested_in_categories_12 : Müşterinin son 12 ayda alışveriş yaptığı kategorilerin listesi

###############################################################
# GÖREVLER
###############################################################

import pandas as pd

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)
pd.set_option('display.float_format', lambda x: '%.2f' % x)

# GÖREV 1: Veriyi Anlama (Data Understanding) ve Hazırlama
# 1. flo_data_20K.csv verisini okuyunuz.

df_ = pd.read_csv("flo_data_20k.csv")
df = df_.copy()
df.head()
# 2. Veri setinde
# a. İlk 10 gözlem,
df.head(10)
# b. Değişken isimleri,
df.columns
# c. Betimsel istatistik,
df.describe().T
df.shape
# d. Boş değer,
df.isnull().sum()
# e. Değişken tipleri, incelemesi yapınız.
df.dtypes
df.info()
# 3. Omnichannel müşterilerin hem online'dan hemde offline platformlardan alışveriş yaptığını ifade etmektedir.
# Herbir müşterinin toplam alışveriş sayısı ve harcaması için yeni değişkenler oluşturun.

df["Total_Order"] = df["order_num_total_ever_online"] + df["order_num_total_ever_offline"]
df["Total_Value"] = df["customer_value_total_ever_online"] + df["customer_value_total_ever_offline"]
df.head()

# 4. Değişken tiplerini inceleyiniz. Tarih ifade eden değişkenlerin tipini date'e çeviriniz.


df.loc[:, df.columns.str.contains("date", na=False)] = \
    df.loc[:, df.columns.str.contains("date", na=False)].astype('datetime64[ns]')
df.dtypes

#diğer yol
date_columns = [col for col in df.columns if "date" in col]

df[date_columns]=df[date_columns].astype('datetime64')

# 5. Alışveriş kanallarındaki müşteri sayısının, ortalama alınan ürün sayısının ve
# ortalama harcamaların dağılımına bakınız.

df.groupby("order_channel").agg({"master_id":"count",
                                "Total_Order": "mean",
                                 "Total_Value": "mean"})

# 6. En fazla kazancı getiren ilk 10 müşteriyi sıralayınız.

df.head(10).sort_values(by='Total_Value', ascending=False)

# 7. En fazla siparişi veren ilk 10 müşteriyi sıralayınız.

df.head(10).sort_values(by='Total_Order', ascending=False)
# 8. Veri ön hazırlık sürecini fonksiyonlaştırınız.

def prepare_df(dataframe):
    dataframe["Total_Order"] = dataframe["order_num_total_ever_online"] + dataframe["order_num_total_ever_offline"]
    dataframe["Total_Value"] = dataframe["customer_value_total_ever_online"] + dataframe["customer_value_total_ever_offline"]

#Colums containing date turned into dtype datetime64
    date_columns = [col for col in df.columns if "date" in col]
    df[date_columns] = df[date_columns].astype('datetime64')

    return dataframe

# GÖREV 2: RFM Metriklerinin Hesaplanması

max_date = df["last_order_date"].max()
import datetime as dt

today_date = dt.datetime(2021, 6, 1)  # analizimi 1 haziran 2021 göre yapacağız.

rfm = df.groupby("master_id").agg({"last_order_date": lambda date: (today_date - date.max()).days,
                                   "Total_Order": lambda sum_order: sum_order.sum(),
                                   "Total_Value": lambda sum_total: sum_total.sum()
                                   })
rfm = rfm.reset_index()
rfm.columns = ["master_id", "recency", "frequency", "monetary"]
rfm.head()
# GÖREV 3: RF ve RFM Skorlarının Hesaplanması

rfm["recency_score"] = pd.qcut(rfm["recency"], 5, labels=[5, 4, 3, 2, 1])
rfm["frequency_score"] = pd.qcut(rfm["frequency"].rank(method="first"), 5, labels=[1, 2, 3, 4, 5])
rfm["monetary_score"] = pd.qcut(rfm["monetary"], 5, labels=[1, 2, 3, 4, 5])

# GÖREV 4: RF Skorlarının Segment Olarak Tanımlanması

rfm["RF_SCORE"] = rfm["recency_score"].astype(str) + rfm["frequency_score"].astype(str)
rfm.head()
seg_map = {
    r'[1-2][1-2]': 'hibernating',
    r'[1-2][3-4]': 'at_Risk',
    r'[1-2]5': 'cant_loose',
    r'3[1-2]': 'about_to_sleep',
    r'33': 'need_attention',
    r'[3-4][4-5]': 'loyal_customers',
    r'41': 'promising',
    r'51': 'new_customers',
    r'[4-5][2-3]': 'potential_loyalists',
    r'5[4-5]': 'champions'
}
rfm["segment"] = rfm["RF_SCORE"].replace(seg_map, regex=True)

# GÖREV 5: Aksiyon zamanı!
# 1. Segmentlerin recency, frequnecy ve monetary ortalamalarını inceleyiniz.

rfm.groupby("segment")["recency", "frequency", "monetary"].mean()

# 2. RFM analizi yardımı ile 2 case için ilgili profildeki müşterileri bulun ve müşteri id'lerini csv ye kaydediniz.

# a. FLO bünyesine yeni bir kadın ayakkabı markası dahil ediyor. Dahil ettiği markanın ürün fiyatları genel müşteri tercihlerinin üstünde. Bu nedenle markanın
# tanıtımı ve ürün satışları için ilgilenecek profildeki müşterilerle özel olarak iletişime geçeilmek isteniliyor. Sadık müşterilerinden(champions,loyal_customers),
# ortalama 250 TL üzeri ve kadın kategorisinden alışveriş yapan kişiler özel olarak iletişim kuralacak müşteriler. Bu müşterilerin id numaralarını csv dosyasına
# yeni_marka_hedef_müşteri_id.cvs olarak kaydediniz.

rfm[rfm["monetary"] > 250].head()
top_customers = rfm[rfm["segment"].isin(["loyal_customers", "champions"])]["master_id"]
top_customers.head()  # sadık müşteri grubu
rfm[rfm["monetary"] > 250]  # ortalam 250 TL üzeri alıs veris yapanlar
df.loc[df["master_id"].isin(top_customers)]  # top customers müşterilerimizin genel veri setinde yer alanlar
df[df["interested_in_categories_12"].str.contains("KADIN")].head()  # Kadın kategorisinden alışveriş yapanlar

new_brand_target_customers = pd.merge(df, rfm, how="left", on="master_id")
nbtc = new_brand_target_customers.copy()

nbtc.loc[(nbtc[nbtc["monetary"] > 250]) &
         (nbtc[nbtc["interested_in_categories_12"].str.contains("KADIN")]).head()

nbtc_csv=nbtc.loc[(nbtc["monetary"] > 250) &
         (nbtc["interested_in_categories_12"].str.contains("KADIN")),
"master_id"]

nbtc_csv.to_csv("nbtc.csv")
# b. Erkek ve Çoçuk ürünlerinde %40'a yakın indirim planlanmaktadır. Bu indirimle ilgili kategorilerle ilgilenen geçmişte iyi müşteri olan ama uzun süredir
# alışveriş yapmayan kaybedilmemesi gereken müşteriler, uykuda olanlar ve yeni gelen müşteriler özel olarak hedef alınmak isteniliyor. Uygun profildeki müşterilerin id'lerini csv dosyasına indirim_hedef_müşteri_ids.csv
# olarak kaydediniz.

target_customers = rfm[rfm["segment"].isin(["cant_loose", "hibernating", "new_customers"])]["master_id"]
discount_target_customer_ids = (df.loc[df["master_id"].isin(target_customers) &
         df["interested_in_categories_12"].str.contains("ERKEK|COCUK")
         ])
discount_target_customer_ids.name = "master_id"
discount_target_customer_ids.to_csv("datasets/discount_target_customer_ids.csv")

# GÖREV 6: Tüm süreci fonksiyonlaştırınız.

def rfm_prepare(dataframe):
    import datetime as dt
    max_date = df["last_order_date"].max()
    today_date = dt.datetime(2021, 6, 1)

    rfm = df.groupby("master_id").agg({"last_order_date": lambda date: (today_date - date.max()).days,
                                       "Total_Order": lambda sum_order: sum_order.sum(),
                                       "Total_Value": lambda sum_total: sum_total.sum()
                                       })
    rfm = rfm.reset_index()
    rfm.columns = ["master_id", "recency", "frequency", "monetary"]

    rfm["recency_score"] = pd.qcut(rfm["recency"], 5, labels=[5, 4, 3, 2, 1])
    rfm["frequency_score"] = pd.qcut(rfm["frequency"].rank(method="first"), 5, labels=[1, 2, 3, 4, 5])
    rfm["monetary_score"] = pd.qcut(rfm["monetary"], 5, labels=[1, 2, 3, 4, 5])

    rfm["RF_SCORE"] = rfm["recency_score"].astype(str) + rfm["frequency_score"].astype(str)

    seg_map = {
        r'[1-2][1-2]': 'hibernating',
        r'[1-2][3-4]': 'at_Risk',
        r'[1-2]5': 'cant_loose',
        r'3[1-2]': 'about_to_sleep',
        r'33': 'need_attention',
        r'[3-4][4-5]': 'loyal_customers',
        r'41': 'promising',
        r'51': 'new_customers',
        r'[4-5][2-3]': 'potential_loyalists',
        r'5[4-5]': 'champions'
    }
    rfm["segment"] = rfm["RF_SCORE"].replace(seg_map, regex=True)

    return dataframe


